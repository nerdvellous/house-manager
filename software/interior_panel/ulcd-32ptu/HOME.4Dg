#platform "uLCD-32PTU"

/*
 * File: HOME.4DViSi
 * Author: Alex Papaya
 *
 * Description:
 *      Main program of the touchscreen.
 *      It's this file that will be called by the micro.
 *      It manages the multiforms and displays some useful information
 *      from various sensors (ext temperature, alarm status, real time, etc.).
 *
 * Copyright 2014 Alexandre Papaya
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#inherit "4DGL_16bitColours.fnc"
#inherit "VisualConst.inc"
#inherit "HOMEConst.inc"
#inherit "LEDDIGITSDISPLAY.inc"
#inherit "KBRoutines.inc"
#inherit "PrintDisk.inc"

// fonts
var hFont1, hFont2;
var hstrings;

// serial comms
var command := 0;
var value := 0;
var update := 0;
var com_state := 0;

// multiforms
var form := "home";
var command_form;
var exit_home;
var exit_adminnumpad;
var exit_admin;

// data to display
var hour := 0;
var minute := 0;
var day_of_week := 1;
var day := 1;
var month := 1;
var year := 0;
var temp := 0;
var update_time;
var update_date;
var update_temp;

/*
 * Common
 */

// check if a message is received from the usart
// and if so, store the command/data
func check_com()
     var ch;
     ch := serin();
    if (ch != -1)
        if (command == 0 && com_state == 0)
           command := ch;
           com_state := 1;
        else
            value := ch;
            update := 1;
            com_state := 0;
        endif
    endif

    if (update)

        if (command == 'h')
            hour := value;
            update_time := 1;
        else if (command == 'm')
            minute := value;
            update_time := 1;
        else if (command == 'Y')
            year := value;
            update_date := 1;
        else if (command == 'M')
            month := value;
            update_date := 1;
        else if (command == 'D')
            day := value;
            update_date := 1;
        else if (command == 'W')
            day_of_week := value;
            update_date := 1;
        else if (command == 't')
            temp := value;
            update_temp := 1;
        else if (command == 'k')
            txt_FontID(FONT1);
            txt_MoveCursor(0,0);
            txt_Set(TEXT_COLOUR,GREEN);
            putstr("OK");
         endif
         command := 0;
         value := 0;
         update := 0;
    endif
endfunc

// main function
func main()
    repeat
        if (form == "home")
            home();
        else if (form == "adminnumpad")
             admin_numpad();
        else if (form == "admin")
             admin();
        endif
     forever
endfunc

/*
 * ADMIN
 */

#CONST
    ibtnBack        // offset 0x0
    ibtnClear       // offset 0x3A00
    ibtnAdd         // offset 0x7400
#END

// show the admin window
func admin()
    var x, y, state, n;
    hndl := file_LoadImageControl("MENU.dat", "MENU.gci", 0);

    img_ClearAttributes(hndl, ibtnBack, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, ibtnBack);  // show button, only do this once
    img_ClearAttributes(hndl, ibtnClear, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, ibtnClear);  // show button, only do this once
    img_ClearAttributes(hndl, ibtnAdd, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, ibtnAdd);  // show button, only do this once

    var ch;
    repeat
        check_com();

        state := touch_Get(TOUCH_STATUS);               // get touchscreen status
        n := img_Touched(hndl,-1) ;

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_PRESSED)                        // if there's a press
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
            if (n == ibtnBack)
                img_SetWord(hndl, ibtnBack, IMAGE_INDEX, 1); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnBack);
                form := "home";
                exit_admin := 1;
            else if (n == ibtnClear)
                img_SetWord(hndl, ibtnClear, IMAGE_INDEX, 1); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnClear);
                serout('c');
            else if (n == ibtnAdd)
                img_SetWord(hndl, ibtnAdd, IMAGE_INDEX, 1); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnAdd);
                serout('n');
            endif
        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_RELEASED)                      // if there's a release
            if (n == ibtnBack)
                img_SetWord(hndl, ibtnBack, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnBack);
            else if (n == ibtnClear)
                img_SetWord(hndl, ibtnClear, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnClear);
            else if (n == ibtnAdd)
                img_SetWord(hndl, ibtnAdd, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down
                img_Show(hndl,ibtnAdd);
            endif
        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_MOVING)                       // if it's moving
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
        endif

    until (exit_admin);
    exit_admin := 0;
    gfx_Cls();
    mem_Free(hndl);
endfunc

/*
 * ADMIN NUMPAD
 */

#DATA
    byte ikeyboard1keystrokes 0x07, 0x08, 0x09, 0x04, 0x05, 0x06, 0x01, 0x02, 0x03, 0x6E, 0x00, 0x64
#END

// object indexes into ImageControl
#CONST
    ikeyboard1      // offset 0x0
    ikeyboard1_0    // offset 0x25000
    ikeyboard1_1    // offset 0x29800
    ikeyboard1_2    // offset 0x2E000
    ikeyboard1_3    // offset 0x32800
    ikeyboard1_4    // offset 0x37000
    ikeyboard1_5    // offset 0x3B800
    ikeyboard1_6    // offset 0x40000
    ikeyboard1_7    // offset 0x44800
    ikeyboard1_8    // offset 0x49000
    ikeyboard1_9    // offset 0x4D800
    ikeyboard1_10   // offset 0x52000
    ikeyboard1_11   // offset 0x56800
    iledCode        // offset 0x5B000
    iiledCode       // offset 0x5F600
#END

#constant DIGITS 4

var okeyboard1[12] := [-1, 0, 0, 0, 0, 255, 255, 255, 255, 255, 12, 0] ;
var k;
var code_value;
var code[5];

// function called each time a key is pressed
// it updates and checks the code
func KbHandler(var Key)
    var i, power;
    if (Key == 100) // backspace
        if (k)
            code[k] := 0;
            k--;
        endif
     else if (Key == 110)
        exit_adminnumpad := 1;
        form := "home";
    else if (k < DIGITS)
        code[k] := Key;
        k++;
    endif

    power:=1;
    code_value:=0;
    for (i := (k-1); i >= 0; i--)
        code_value:= code_value+code[i]*power;
        power:=power*10;
    next

    update_digits();

    if(k == DIGITS)
        if (code_value != 1234)
            clear_code();
            txt_FontID(FONT1);
            txt_MoveCursor(0,0);
            txt_Set(TEXT_COLOUR,RED);
            putstr("Code errone");
            pause(2000);
            update_digits();
        else
           exit_adminnumpad := 1;
           form := "admin";
        endif
    endif
endfunc

// clear the code
func clear_code()
    var i;
    k := 0;
    code_value := 0;
    for (i := 0; i < DIGITS; i++)
        code[i] := 0;
    next
endfunc

// display the code on top of the screen
func update_digits()
     if (code_value)
        ledDigitsDisplay(code_value, iledCode+1, 40, 4, 1, 40, 1);
    else
        gfx_PenSize(SOLID);
        gfx_Rectangle(0,0,239,80,BLACK);
    endif
endfunc

// show the admin numpad
func admin_numpad()
    var x, y, i, state, n;
    hndl := file_LoadImageControl("NUMPAD.dat", "NUMPAD.gci", 0);

    clear_code();

    img_Show(hndl,ikeyboard1) ; // show initialy, if required
    for (i := ikeyboard1+1; i <= ikeyboard1+okeyboard1[KbButtons]; i++)
        img_SetWord(hndl, i, IMAGE_FLAGS, (img_GetWord(hndl, i, IMAGE_FLAGS) | I_STAYONTOP) & ~I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    next

    repeat
        check_com();
        state := touch_Get(TOUCH_STATUS);               // get touchscreen status
        n := img_Touched(hndl,-1) ;

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_PRESSED)                        // if there's a press
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
            if ((n >= ikeyboard1) && (n <= ikeyboard1+okeyboard1[KbButtons]))
                kbDown(ikeyboard1, okeyboard1, ikeyboard1keystrokes, n-ikeyboard1, KbHandler) ;
            endif
        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_RELEASED)                      // if there's a release
            if (okeyboard1[KbDown] != -1) kbUp(ikeyboard1, okeyboard1) ;
        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_MOVING)                       // if it's moving
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
        endif

    until(exit_adminnumpad);
    exit_adminnumpad := 0;
    gfx_Cls();
    mem_Free(hndl);
 endfunc

/*
 * HOME
 */

// show the temperature
func update_digitstemp()
    var y1,y2,x1,x2,l;
    y1 := 288;
    y2 := 289;
    x1 := 140;
    x2 := 120;
    l := 10;
    if (temp >= 100)
        var ntemp;
        ntemp := temp - 100;

        gfx_PenSize(SOLID);
        gfx_Rectangle(120,250,239,319,BLACK);
        ledDigitsDisplay(ntemp, idigitsTemp+1, 135, 2, 1, 27, 1);

        if (ntemp < 10)
            gfx_PenSize(SOLID);
            gfx_Rectangle(x1,y1,x1+l,y2,0x34DF);
        else
            gfx_PenSize(SOLID);
            gfx_Rectangle(x2,y1,x2+l,y2,0x34DF);
        endif
    else
        ledDigitsDisplay(temp, idigitsTemp+1, 135, 2, 1, 27, 1);
    endif
endfunc

// show the date
func update_datedisplay()
    gfx_PenSize(SOLID);
    gfx_Rectangle(0,250,119,319,BLACK);
    txt_FontID(hFont1); // Font index correct at time of code generation
    txt_FGcolour(WHITE) ;
    txt_BGcolour(BLACK) ;
    gfx_MoveTo(20 , 270);
    PrintDisk(hstrings, strDayStartH, strDayStartL, strDaySize, day_of_week-1) ; // where i is Message 0 - Strings1Count-1
    gfx_MoveTo(20 , 290);
    if (day < 10)
        putch('0');
    endif
    print(day);
    putch('/');
    if (month < 10)
        putch('0');
    endif
    print(month);
    putch('/');
    print(2000+year);
endfunc

// show the home window
func home()
    var x, y, state, n;
    hFont1 := file_LoadImageControl("HOME.da1", "HOME.gc1", 1);
    hFont2 := file_LoadImageControl("HOME.da2", "HOME.gc2", 1);
    hstrings := file_Open("HOME.txf", 'r');
    hndl := file_LoadImageControl("HOME.dat", "HOME.gci", 1);

    txt_FontID(hFont2) ; // Font index correct at time of code generation
    txt_FGcolour(RED) ;
    txt_BGcolour(BLACK) ;
    gfx_MoveTo(0 , 148) ;
    PrintDisk(hstrings, strAlarmStartH, strAlarmStartL, strAlarmSize, 0) ; // where i is Message 0 - Strings2Count-1

    ledDigitsDisplay(hour, idigitsHour+1, 20, 2, 1, 44, 0);
    ledDigitsDisplay(minute, idigitsMinute+1, 140, 2, 1, 44, 0);
    update_digitstemp();
    update_datedisplay();

    img_Show(hndl,ilblTimeSeparator);
    img_Show(hndl,ilblTemp);

    repeat
        check_com();
        state := touch_Get(TOUCH_STATUS);               // get touchscreen status
        n := img_Touched(hndl,-1) ;

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_PRESSED)                        // if there's a press
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
            if (x > 200 && y < 40)
                command_form := "adminnumpad";
                exit_home := 1 ;
            endif
        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_RELEASED)                      // if there's a release

        endif

        //-----------------------------------------------------------------------------------------
        if(state == TOUCH_MOVING)                       // if it's moving
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
        endif


        if (update_time)
            ledDigitsDisplay(hour, idigitsHour+1, 20, 2, 1, 44, 0);
            ledDigitsDisplay(minute, idigitsMinute+1, 140, 2, 1, 44, 0);
            update_time := 0;
        else if (update_date)
            update_datedisplay();
            update_date := 0;
        else if (update_temp)
            update_digitstemp();
            update_temp := 0;
        endif

    until (exit_home);
    exit_home := 0;
    gfx_Cls();
    mem_Free(hndl);
    mem_Free(hFont1);
    mem_Free(hFont2);
    file_Close(hstrings);
    txt_FontID(FONT1);
    if (command_form == "adminnumpad")
        form := "adminnumpad";
    endif
endfunc

